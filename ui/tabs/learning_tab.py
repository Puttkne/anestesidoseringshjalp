import streamlit as st
import pandas as pd
import database as db
import auth
from config import APP_CONFIG

def render_learning_tab(procedures_df):
    st.header("üß† Inl√§rning & Modeller")
    st.markdown("""
    Appen anv√§nder tv√• inl√§rningssystem parallellt f√∂r att bli smartare √∂ver tid. B√•da systemen blir mer stabila och "tr√∂gare" ju mer data de f√•r, vilket skyddar mot att enskilda avvikande fall skapar op√•litliga rekommendationer.
    - **Regelmotorn** justerar sin dos baserat p√• ett "fingeravtryck" av fallet. Inl√§rningen √§r d√§mpad, vilket inneb√§r att extrema VAS-v√§rden har en minskad proportionerlig p√•verkan.
    - **XGBoost-modellen** √§r en avancerad ML-modell som tr√§nas om p√• all insamlad data f√∂r ett specifikt ingrepp. Den l√§r sig komplexa m√∂nster och blir mer robust ju st√∂rre datam√§ngden √§r.
    """)
    learn_tabs = st.tabs(["Modellstatus per Ingrepp", "Regelmotor-inl√§rning", "Statistik"])

    with learn_tabs[0]:
        st.subheader("ML-Modellens Aktiveringsstatus")
        st.markdown(f"XGBoost-modellen aktiveras f√∂r ett specifikt ingrepp n√§r **{APP_CONFIG['ML_THRESHOLD_PER_PROCEDURE']}** fall har loggats f√∂r det.")

        all_cases = db.get_all_cases()
        cases_df_stat = pd.DataFrame(all_cases) if all_cases else pd.DataFrame()

        if not cases_df_stat.empty and 'procedure_id' in cases_df_stat.columns:
            case_counts = cases_df_stat['procedure_id'].value_counts().reset_index()
            case_counts.columns = ['id', 'Antal Fall']

            status_df = procedures_df.merge(case_counts, on='id', how='left').fillna(0)
            status_df['Antal Fall'] = status_df['Antal Fall'].astype(int)
            status_df['Modellstatus'] = status_df['Antal Fall'].apply(lambda x: '‚úÖ Aktiv' if x >= APP_CONFIG['ML_THRESHOLD_PER_PROCEDURE'] else '‚è≥ Inaktiv')
            status_df.rename(columns={'name': 'Ingrepp', 'specialty': 'Specialitet'}, inplace=True)

            st.dataframe(status_df[['Specialitet', 'Ingrepp', 'Antal Fall', 'Modellstatus']], use_container_width=True)
        else:
            st.info("Inga fall har loggats √§nnu f√∂r att kunna avg√∂ra modellstatus.")

    with learn_tabs[1]:
        st.subheader("Regelmotorns Personliga Kalibreringsprofil")

        st.markdown("### üíä Adjuvanteffektivitet per Sm√§rttyp")
        st.markdown("Varje adjuvant har olika effektivitet (0-10) f√∂r de tre sm√§rttyperna:")
        st.caption("üî¥ **Somatisk** | üîµ **Visceral** | üü¢ **Neuropatisk**")

        # Skapa en tabell med alla adjuvanter och deras effektivitet per sm√§rttyp
        adjuvant_data = {
            "Adjuvant": [
                "Paracetamol 1g",
                "NSAID (Ibuprofen 400mg)",
                "Ketorolac 30mg",
                "Parecoxib 40mg",
                "Catapressan (Klonidin)",
                "Droperidol",
                "Ketamin liten bolus",
                "Ketamin stor bolus",
                "Ketamin liten infusion",
                "Ketamin stor infusion",
                "Lidokain Bolus",
                "Lidokain Infusion",
                "Betapred 4 mg",
                "Betapred 8 mg",
                "Sevofluran",
                "Infiltration"
            ],
            "Dos-reduktion": [
                "-15%",
                "-20%",
                "-25%",
                "-20%",
                "-20%",
                "-15%",
                "-10%",
                "-20%",
                "-15%",
                "-30%",
                "-10%",
                "-20%",
                "-10%",
                "-15%",
                "-10%",
                "-15%"
            ],
            "üî¥ Somatisk": [7, 9, 9, 8, 2, 5, 5, 6, 5, 6, 3, 4, 3, 4, 6, 8],
            "üîµ Visceral": [5, 3, 2, 3, 8, 5, 6, 7, 6, 7, 7, 8, 7, 8, 5, 4],
            "üü¢ Neuropatisk": [3, 1, 1, 1, 6, 5, 7, 8, 7, 8, 5, 6, 2, 3, 4, 2]
        }

        adj_df = pd.DataFrame(adjuvant_data)

        st.dataframe(
            adj_df,
            column_config={
                "Adjuvant": st.column_config.TextColumn("Adjuvant", width="medium"),
                "Dos-reduktion": st.column_config.TextColumn("Dos-reduktion", width="small"),
                "üî¥ Somatisk": st.column_config.ProgressColumn(
                    "üî¥ Somatisk",
                    help="Effektivitet mot somatisk sm√§rta (0-10)",
                    format="%d/10",
                    min_value=0,
                    max_value=10,
                    width="small"
                ),
                "üîµ Visceral": st.column_config.ProgressColumn(
                    "üîµ Visceral",
                    help="Effektivitet mot visceral sm√§rta (0-10)",
                    format="%d/10",
                    min_value=0,
                    max_value=10,
                    width="small"
                ),
                "üü¢ Neuropatisk": st.column_config.ProgressColumn(
                    "üü¢ Neuropatisk",
                    help="Effektivitet mot neuropatisk sm√§rta (0-10)",
                    format="%d/10",
                    min_value=0,
                    max_value=10,
                    width="small"
                ),
            },
            hide_index=True,
            use_container_width=True
        )

        st.caption("üí° **Tips:** Dessa v√§rden kombineras med ingreppets sm√§rtprofil f√∂r optimal dosering. Systemet l√§r sig √∂ver tid och justerar effektiviteten baserat p√• faktiska utfall.")

        st.divider()

        st.markdown("### üß† Inl√§rda Justeringsfaktorer")
        user_id = auth.get_current_user_id()
        factors = db.get_all_calibration_factors(user_id)

        if not factors:
            st.info("Ingen specifik inl√§rning f√∂r regelmotorn har skett √§nnu. N√§r du sparar fall kommer systemet att l√§ra sig och justera doserna automatiskt.")
        else:
            sorted_factors = sorted(factors.items(), key=lambda item: abs(item[1] - 1), reverse=True)
            factor_data = {"Fingeravtryck": [k for k, v in sorted_factors], "Justeringsfaktor": [v for k, v in sorted_factors]}
            df = pd.DataFrame(factor_data)
            st.dataframe(df, column_config={
                "Justeringsfaktor": st.column_config.ProgressColumn("Faktor", format="x%.3f", min_value=0.2, max_value=3.0)
            }, use_container_width=True)
            st.caption(f"üìä Totalt {len(factors)} unika konfigurationer har tr√§nats baserat p√• dina fall.")

    with learn_tabs[2]:
        st.subheader("üìä Statistik & Analys")

        all_cases = db.get_all_cases()
        cases_df_analysis = pd.DataFrame(all_cases) if all_cases else pd.DataFrame()

        if cases_df_analysis.empty:
            st.info("Inga fall har loggats √§nnu f√∂r att visa statistik.")
        else:
            cases_df_analysis['procedure_name'] = cases_df_analysis['procedure_id'].apply(
                lambda x: procedures_df.loc[procedures_df['id'] == x, 'name'].iloc[0] if x and x in procedures_df['id'].values else 'Ok√§nt'
            )

            st.markdown("### √ñvergripande statistik")
            stat_cols = st.columns(4)
            with stat_cols[0]:
                st.metric("Totalt antal fall", len(cases_df_analysis))
            with stat_cols[1]:
                avg_vas = cases_df_analysis['vas'].mean()
                st.metric("Genomsnittligt VAS", f"{avg_vas:.1f}")
            with stat_cols[2]:
                high_vas_pct = (cases_df_analysis['vas'] > 4).sum() / len(cases_df_analysis) * 100
                st.metric("Andel VAS >4", f"{high_vas_pct:.1f}%")
            with stat_cols[3]:
                avg_dose = cases_df_analysis['givenDose'].mean()
                st.metric("Genomsnittlig dos", f"{avg_dose:.1f} mg")

            st.divider()

            st.markdown("### Statistik per ingrepp")
            proc_stats = cases_df_analysis.groupby('procedure_name').agg({
                'vas': ['mean', 'max', lambda x: (x > 4).sum()],
                'givenDose': ['mean', 'min', 'max'],
                'procedure_id': 'count'
            }).round(1)
            proc_stats.columns = ['Medel VAS', 'Max VAS', 'Antal VAS >4', 'Medel Dos (mg)', 'Min Dos', 'Max Dos', 'Antal Fall']
            proc_stats = proc_stats.sort_values('Antal Fall', ascending=False)
            st.dataframe(proc_stats, use_container_width=True)

            st.divider()

            st.markdown("### VAS-f√∂rdelning")
            vas_counts = cases_df_analysis['vas'].value_counts().sort_index()
            st.bar_chart(vas_counts)

            st.divider()

            st.markdown("### Trend: Senaste 30 fallen")
            if len(cases_df_analysis) >= 5:
                recent_cases = cases_df_analysis.sort_values('timestamp', ascending=False).head(30)
                trend_cols = st.columns(2)

                with trend_cols[0]:
                    st.write("**VAS √∂ver tid**")
                    vas_trend = recent_cases.sort_values('timestamp')[['timestamp', 'vas']].reset_index(drop=True)
                    st.line_chart(vas_trend.set_index('timestamp')['vas'])

                with trend_cols[1]:
                    st.write("**Given dos √∂ver tid**")
                    dose_trend = recent_cases.sort_values('timestamp')[['timestamp', 'givenDose']].reset_index(drop=True)
                    st.line_chart(dose_trend.set_index('timestamp')['givenDose'])

            st.divider()

            st.markdown("### Aktivitet per anv√§ndare")
            if 'user_id' in cases_df_analysis.columns:
                cases_df_analysis['created_by_name'] = cases_df_analysis['user_id'].apply(
                    lambda x: db.get_user_by_id(x)['username'] if db.get_user_by_id(x) else 'Ok√§nd'
                )
                user_stats = cases_df_analysis.groupby('created_by_name').agg({
                    'procedure_id': 'count',
                    'vas': 'mean',
                    'givenDose': 'mean'
                }).round(1)
                user_stats.columns = ['Antal Fall', 'Medel VAS', 'Medel Dos (mg)']
                user_stats = user_stats.sort_values('Antal Fall', ascending=False)
                st.dataframe(user_stats, use_container_width=True)
